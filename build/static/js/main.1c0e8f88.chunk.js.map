{"version":3,"sources":["components/FriendCard/FriendsCard.js","components/Wrapper/Wrapper.js","components/GameMessage/GameMessage.js","components/Header/Header.js","components/Footer/Footer.js","components/Game/Game.js","App.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","role","aria-label","className","style","backgroundImage","concat","image","value","id","onClick","handleClick","Wrapper","children","GameMessage","state","animating","message","renderMessage","_this","addAnimation","prevProps","newState","score","topScore","this","setState","_this2","onAnimationEnd","Component","Header","components_GameMessage_GameMessage","Footer","Game","friends","shuffleDeck","sort","b","Math","random","resetDeck","resetFriends","map","friend","Object","objectSpread","clicked","correctGuess","newFriends","newScore","newTopScore","max","wrongGuess","gameCardClick","guessedCorrectly","components_Header_Header","components_Wrapper_Wrapper","FriendsCard","key","components_Footer_Footer","App","components_Game_Game","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1c0e8f88.chunk.js","sourcesContent":["// import React from \"react\";\n// import \"./FriendCard.css\";\n\n// const FriendCard = props => (\n//   <div className=\"friendCard img-container\">\n  \n//      <div className=\"img-container\">\n//       <img alt={props.name} src={props.image} />\n//     </div> \n    \n     \n  \n//     <span className=\"remove\" onClick={() => props.deleteFriend(props.id)}></span>\n//   </div>\n// );\n\n// export default FriendCard;\n\n\nimport React from \"react\";\nimport \"./FriendCard.css\";\n\nconst FriendCard = props => (\n    <div\n        role=\"img\"\n        aria-label=\"click item\" \n        className=\"friendCard\"\n        style={{ backgroundImage: `url(\"${props.image}\")` }}\n        value={props.id}\n        onClick={() => props.handleClick(props.id)}\n    /> \n);\n\nexport default FriendCard;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <main className=\"wrapper\">{props.children}</main>;\n\nexport default Wrapper;\n","import React, {Component} from \"react\";\nimport \"./GameMessage.css\";\n\nclass GameMessage extends Component {\n\n    state = {\n        animating: false,\n        message: \"\"\n    }\n\n    // function runs on every state change\n    componentDidUpdate(prevProps) {\n\n      // will be passed into setState function\n      let newState = {\n        animating: true\n      }\n\n      // deconstruct score and topScore from the pervious state\n      const {score, topScore} = prevProps\n\n      // change message if user guess correclty or incorrectly\n      if (score === 0 && topScore === 0) {\n        newState.message = \"\";\n      } else if (score !== 0 && topScore > 0) {\n        newState.message = \"correct\";\n      } else {\n        newState.message = \"incorrect\";\n      }\n\n      // set the state with the new message if the score changes, \n      // or the message and state message are not equal\n      if (score !== this.props.score || this.state.message !== newState.message) {\n        this.setState(newState);\n      }\n  \n    }\n\n    // change the display message based on the message state\n    renderMessage = () => {\n        switch (this.state.message) {\n        case \"correct\":\n          return \"You guessed correctly!\";\n        case \"incorrect\":\n          return \"You guessed incorrectly!\";\n        default:\n          return \"Click a character to begin!\";\n        }\n    };\n\n    // add animation class when animateClass state updates\n    // animations from aniamte.css library\n    // https://daneden.github.io/animate.css/\n    addAnimation = () => {\n      switch (this.state.message) {\n        case \"correct\":\n          return \"animated flash\";\n        case \"incorrect\":\n          return \"animated flip\";\n        default:\n          return \"\";\n        }     \n    }\n\n    \n\n    render() {\n        return(\n          <li \n            // if the state.aniamtion = true, add the class from animate.css to trigger the animation,\n            // also add the state.message as a class, which changes the color,\n            // if aniamtion.state = false, remove the aniamte.css class and add the '.black' class\n            className={` \n              gameMessage \n              ${this.state.animating? this.addAnimation(): \"\"}  \n              ${this.state.animating? this.state.message: \"black\"}\n            `}\n            id={`${this.state.message}`}\n            // set the animation state back to false after the classes are added\n            onAnimationEnd={() => this.setState({ animating: false })} \n          >\n            {this.renderMessage()}\n          </li>  \n        );\n    }\n}\n\nexport default GameMessage;\n","import React from \"react\";\nimport \"./Header.css\";\nimport GameMessage from \"../GameMessage\";\n\nconst Header = props => (\n    <div className=\"header\">\n        <ul>\n            <li><h2 className=\" title animated rubberBand\">Clicky Game</h2></li>\n            <GameMessage score={props.score} topScore={props.topScore} />\n            <li id=\"score\">Score: {props.score} | Top Score: {props.topScore}</li>\n        </ul>\n        \n    </div>\n)\n\nexport default Header;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => (\n    <footer className=\"footer\">\n        <div className=\"bottom\">\n            <ul id='footer-list'>\n                \n                \n            </ul>\n        </div>\n    </footer>\n)\n\nexport default Footer;","import React, { Component } from \"react\";\nimport FriendCard from \"../FriendCard\";\nimport Wrapper from \"../Wrapper\";\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\nimport friends from \"../../data\";\n\n\nclass Game extends Component {\n  state = {\n    friends: friends,\n    score: 0,\n    topScore: 0\n  }\n\n// function gets called when the page loads\ncomponentDidMount() {\n  // reorders the friends array on state changes\n  this.setState({ friends: this.shuffleDeck(this.state.friends) });\n}\n\n // shuffle the imported friends array in random order\n shuffleDeck = friends => {\n  let newFriends = friends.sort(function(a, b){return 0.5 - Math.random()});\n  return newFriends;\n};\n\n// resets all the clicked properties to false\nresetDeck = friends => {\n  const resetFriends = friends.map(friend => ({ ...friend, clicked: false }));\n  // console.log(friends);\n  // console.log(resetFriends);\n  return this.shuffleDeck(resetFriends);\n};\n\n// checks to see if score is higher than the topscore then updates the state with the update array\ncorrectGuess = newFriends => {\n  let newScore = this.state.score;\n  newScore++\n  // fix would be this.state.score\n  let newTopScore = Math.max(newScore, this.state.topScore);\n\n  this.setState({\n      friends: this.shuffleDeck(newFriends),\n      score: newScore,\n      topScore: newTopScore,\n      \n  })\n}\n\n// restarts the game with fresh data\nwrongGuess = newFriends => {\n  this.setState({\n    friends: this.resetDeck(newFriends),\n      score: 0\n  })\n}\n\n// when a card is clicked, check if it has been clicked before,\n// then update that cards clicked property\ngameCardClick = id => {\n  let guessedCorrectly = false;\n  // newFriends will be the friends array with updated clicked properties\n  const newFriends= this.state.friends.map(friend => {\n    if (friend.id === id) {\n      if (!friend.clicked) {\n        friend.clicked = true;\n        guessedCorrectly = true;\n      }\n    }\n    return friend;     \n  });\n  // if guessedCorrectly = true, run the correctGuess function,\n  // else run the wrongGuess function\n  guessedCorrectly ? this.correctGuess(newFriends) : this.wrongGuess(newFriends);\n};\n\n\n  \n  render() {\n    return (\n      <div>\n        <Header score={this.state.score} topScore = {this.state.topScore} />\n          <Wrapper>\n            <h1></h1>\n            {this.state.friends.map(friend => \n              <FriendCard\n              key={friend.id}\n              id={friend.id}\n              image={friend.image}\n              clicked={friend.clicked}\n              handleClick={this.gameCardClick}\n            />\n              )}\n            \n          </Wrapper>\n          <Footer />\n        </div>\n      );\n    }\n    \n    \n}\n\n\n\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./components/Game\"\n\n\nconst App = () => <Game/>;\n\n\n\n\n\nexport default App;\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.register()"],"sourceRoot":""}