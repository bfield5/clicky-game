{"version":3,"sources":["components/FriendCard/FriendsCard.js","components/Wrapper/Wrapper.js","components/Game/Game.js","App.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","role","aria-label","className","style","backgroundImage","concat","image","onClick","handleClick","id","Wrapper","children","Game","state","friends","score","topScore","shuffleDeck","sort","b","Math","random","resetDeck","resetFriends","map","item","Object","objectSpread","clicked","_this","correctGuess","newFriends","newScore","newTopScore","max","setState","wrongGuess","gameCardClick","guessedCorrectly","this","_this2","components_Wrapper_Wrapper","FriendsCard","key","name","React","Component","App","components_Game_Game","ReactDOM","render","src_App","document","getElementById"],"mappings":"0RAgCeA,SAVI,SAAAC,GAAK,OACpBC,EAAAC,EAAAC,cAAA,OACIC,KAAK,MACLC,aAAW,aACXC,UAAU,aACVC,MAAO,CAAEC,gBAAe,QAAAC,OAAUT,EAAMU,MAAhB,OACxBC,QAAS,kBAAMX,EAAMY,YAAYZ,EAAMa,SCvBhCC,SAFC,SAAAd,GAAK,OAAIC,EAAAC,EAAAC,cAAA,QAAMG,UAAU,WAAWN,EAAMe,mBCoG3CC,6MAhGbC,MAAQ,CACNC,QAASA,EACTC,MAAO,EACPC,SAAU,KAUbC,YAAc,SAAAH,GAEb,OADiBA,EAAQI,KAAK,SAASpB,EAAGqB,GAAG,MAAO,GAAMC,KAAKC,cAKjEC,UAAY,SAAAR,GACV,IAAMS,EAAeT,EAAQU,IAAI,SAAAC,GAAI,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GAAUD,EAAV,CAAgBG,SAAS,MAG9D,OAAOC,EAAKZ,YAAYM,MAI1BO,aAAe,SAAAC,GACb,IAAIC,EAAWH,EAAKhB,MAAME,MAC1BiB,IACA,IAAIC,EAAcb,KAAKc,IAAIF,EAAUH,EAAKhB,MAAMG,UAEhDa,EAAKM,SAAS,CACVrB,QAASe,EAAKZ,YAAYc,GAC1BhB,MAAOiB,EACPhB,SAAUiB,OAMhBG,WAAa,SAAAL,GACXF,EAAKM,SAAS,CACZrB,QAASe,EAAKP,UAAUS,GACtBhB,MAAO,OAMbsB,cAAgB,SAAA5B,GACd,IAAI6B,GAAmB,EAEjBP,EAAYF,EAAKhB,MAAMC,QAAQU,IAAI,SAAAC,GAOvC,OANIA,EAAKhB,KAAOA,IACTgB,EAAKG,UACRH,EAAKG,SAAU,EACfU,GAAmB,IAGhBb,IAITa,EAAmBT,EAAKC,aAAaC,GAAcF,EAAKO,WAAWL,uFAvDnEQ,KAAKJ,SAAS,CAAErB,QAASyB,KAAKtB,YAAYsB,KAAK1B,MAAMC,4CA4D5C,IAAA0B,EAAAD,KACP,OACE1C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0C,EAAD,KACE5C,EAAAC,EAAAC,cAAA,WACCwC,KAAK1B,MAAMC,QAAQU,IAAI,SAAAC,GAAI,OAC1B5B,EAAAC,EAAAC,cAAC2C,EAAD,CACAC,IAAKlB,EAAKhB,GACVA,GAAIgB,EAAKhB,GACTmC,KAAMnB,EAAKmB,KACXtC,MAAOmB,EAAKnB,MACZsB,QAASH,EAAKG,QACdpB,YAAagC,EAAKH,2BAlFbQ,IAAMC,WCIVC,EANH,kBAAMlD,EAAAC,EAAAC,cAACiD,EAAD,OCgBlBC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.dbd2b15e.chunk.js","sourcesContent":["// import React from \"react\";\n// import \"./FriendCard.css\";\n\n// const FriendCard = props => (\n//   <div className=\"friendCard img-container\">\n  \n//      <div className=\"img-container\">\n//       <img alt={props.name} src={props.image} />\n//     </div> \n    \n     \n  \n//     <span className=\"remove\" onClick={() => props.deleteFriend(props.id)}></span>\n//   </div>\n// );\n\n// export default FriendCard;\n\n\nimport React from \"react\";\nimport \"./FriendCard.css\";\n\nconst FriendCard = props => (\n    <div\n        role=\"img\"\n        aria-label=\"click item\" \n        className=\"friendCard\"\n        style={{ backgroundImage: `url(\"${props.image}\")` }}\n        onClick={() => props.handleClick(props.id)}\n    /> \n);\n\nexport default FriendCard;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <main className=\"wrapper\">{props.children}</main>;\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport FriendCard from \"../FriendCard\";\nimport Wrapper from \"../Wrapper\";\nimport friends from \"../../data\";\n\n\nclass Game extends React.Component {\n  state = {\n    friends: friends,\n    score: 0,\n    topScore: 0\n  }\n\n// function gets called when the page loads\ncomponentDidMount() {\n  // reorders the friends array on state changes\n  this.setState({ friends: this.shuffleDeck(this.state.friends) });\n}\n\n // shuffle the imported friends array in random order\n shuffleDeck = friends => {\n  let newFriends = friends.sort(function(a, b){return 0.5 - Math.random()});\n  return newFriends;\n};\n\n// resets all the clicked properties to false\nresetDeck = friends => {\n  const resetFriends = friends.map(item => ({ ...item, clicked: false }));\n  // console.log(friends);\n  // console.log(resetFriends);\n  return this.shuffleDeck(resetFriends);\n};\n\n// checks to see if score is higher than the topscore then updates the state with the update array\ncorrectGuess = newFriends => {\n  let newScore = this.state.score;\n  newScore++\n  let newTopScore = Math.max(newScore, this.state.topScore);\n\n  this.setState({\n      friends: this.shuffleDeck(newFriends),\n      score: newScore,\n      topScore: newTopScore,\n      \n  })\n}\n\n// restarts the game with fresh data\nwrongGuess = newFriends => {\n  this.setState({\n    friends: this.resetDeck(newFriends),\n      score: 0\n  })\n}\n\n// when a card is clicked, check if it has been clicked before,\n// then update that cards clicked property\ngameCardClick = id => {\n  let guessedCorrectly = false;\n  // newFriends will be the friends array with updated clicked properties\n  const newFriends= this.state.friends.map(item => {\n    if (item.id === id) {\n      if (!item.clicked) {\n        item.clicked = true;\n        guessedCorrectly = true;\n      }\n    }\n    return item;     \n  });\n  // if guessedCorrectly = true, run the correctGuess function,\n  // else run the wrongGuess function\n  guessedCorrectly ? this.correctGuess(newFriends) : this.wrongGuess(newFriends);\n};\n\n\n  \n  render() {\n    return (\n      <div>\n          <Wrapper>\n            <h1></h1>\n            {this.state.friends.map(item => \n              <FriendCard\n              key={item.id}\n              id={item.id}\n              name={item.name}\n              image={item.image}\n              clicked={item.clicked}\n              handleClick={this.gameCardClick}\n            />\n              )}\n            \n          </Wrapper>\n        </div>\n      );\n    }\n    \n    \n}\n\n\n\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./components/Game\"\n\n\nconst App = () => <Game/>;\n\n\n\n\n\nexport default App;\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();"],"sourceRoot":""}