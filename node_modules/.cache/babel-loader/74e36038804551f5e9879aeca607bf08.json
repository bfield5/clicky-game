{"ast":null,"code":"import _classCallCheck from \"/Users/Admin/Desktop/code/react-prractice/clicky-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Admin/Desktop/code/react-prractice/clicky-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Admin/Desktop/code/react-prractice/clicky-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Admin/Desktop/code/react-prractice/clicky-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Admin/Desktop/code/react-prractice/clicky-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Admin/Desktop/code/react-prractice/clicky-game/src/components/GameMessage/GameMessage.js\";\nimport React, { Component } from \"react\";\nimport \"./GameMessage.css\";\n\nvar GameMessage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GameMessage, _Component);\n\n  function GameMessage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GameMessage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GameMessage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      animating: false,\n      message: \"\" // function runs on every state change\n\n    };\n\n    _this.renderMessage = function () {\n      switch (_this.state.message) {\n        case \"correct\":\n          return \"You guessed correctly!\";\n\n        case \"incorrect\":\n          return \"You guessed incorrectly!\";\n\n        default:\n          return \"Click a character to begin!\";\n      }\n    };\n\n    _this.addAnimation = function () {\n      switch (_this.state.message) {\n        case \"correct\":\n          return \"animated pulse\";\n\n        case \"incorrect\":\n          return \"animated hinge\";\n\n        default:\n          return \"\";\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(GameMessage, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // will be passed into setState function\n      var newState = {\n        animating: true // deconstruct score and topScore from the pervious state\n\n      };\n      var score = prevProps.score,\n          topScore = prevProps.topScore; // change message if user guess correclty or incorrectly\n\n      if (score === 0 && topScore === 0) {\n        newState.message = \"\";\n      } else if (score !== 0 && topScore > 0) {\n        newState.message = \"correct\";\n      } else {\n        newState.message = \"incorrect\";\n      } // set the state with the new message if the score changes, \n      // or the message and state message are not equal\n\n\n      if (score !== this.props.score || this.state.message !== newState.message) {\n        this.setState(newState);\n      }\n    } // change the display message based on the message state\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"li\", {\n        // if the state.aniamtion = true, add the class from animate.css to trigger the animation,\n        // also add the state.message as a class, which changes the color,\n        // if aniamtion.state = false, remove the aniamte.css class and add the '.black' class\n        className: \" \\n              gameMessage \\n              \".concat(this.state.animating ? this.addAnimation() : \"\", \"  \\n              \").concat(this.state.animating ? this.state.message : \"black\", \"\\n            \"),\n        id: \"\".concat(this.state.message) // set the animation state back to false after the classes are added\n        ,\n        onAnimationEnd: function onAnimationEnd() {\n          return _this2.setState({\n            animating: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, this.renderMessage());\n    }\n  }]);\n\n  return GameMessage;\n}(Component);\n\nexport default GameMessage;","map":{"version":3,"sources":["/Users/Admin/Desktop/code/react-prractice/clicky-game/src/components/GameMessage/GameMessage.js"],"names":["React","Component","GameMessage","state","animating","message","renderMessage","addAnimation","prevProps","newState","score","topScore","props","setState"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,mBAAP;;IAEMC,W;;;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AACJC,MAAAA,SAAS,EAAE,KADP;AAEJC,MAAAA,OAAO,EAAE,EAFL,CAKR;;AALQ,K;;UAkCRC,a,GAAgB,YAAM;AAClB,cAAQ,MAAKH,KAAL,CAAWE,OAAnB;AACA,aAAK,SAAL;AACE,iBAAO,wBAAP;;AACF,aAAK,WAAL;AACE,iBAAO,0BAAP;;AACF;AACE,iBAAO,6BAAP;AANF;AAQH,K;;UAKDE,Y,GAAe,YAAM;AACnB,cAAQ,MAAKJ,KAAL,CAAWE,OAAnB;AACE,aAAK,SAAL;AACE,iBAAO,gBAAP;;AACF,aAAK,WAAL;AACE,iBAAO,gBAAP;;AACF;AACE,iBAAO,EAAP;AANJ;AAQD,K;;;;;;;uCAnDkBG,S,EAAW;AAE5B;AACA,UAAIC,QAAQ,GAAG;AACbL,QAAAA,SAAS,EAAE,IADE,CAIf;;AAJe,OAAf;AAH4B,UAQrBM,KARqB,GAQFF,SARE,CAQrBE,KARqB;AAAA,UAQdC,QARc,GAQFH,SARE,CAQdG,QARc,EAU5B;;AACA,UAAID,KAAK,KAAK,CAAV,IAAeC,QAAQ,KAAK,CAAhC,EAAmC;AACjCF,QAAAA,QAAQ,CAACJ,OAAT,GAAmB,EAAnB;AACD,OAFD,MAEO,IAAIK,KAAK,KAAK,CAAV,IAAeC,QAAQ,GAAG,CAA9B,EAAiC;AACtCF,QAAAA,QAAQ,CAACJ,OAAT,GAAmB,SAAnB;AACD,OAFM,MAEA;AACLI,QAAAA,QAAQ,CAACJ,OAAT,GAAmB,WAAnB;AACD,OAjB2B,CAmB5B;AACA;;;AACA,UAAIK,KAAK,KAAK,KAAKE,KAAL,CAAWF,KAArB,IAA8B,KAAKP,KAAL,CAAWE,OAAX,KAAuBI,QAAQ,CAACJ,OAAlE,EAA2E;AACzE,aAAKQ,QAAL,CAAcJ,QAAd;AACD;AAEF,K,CAED;;;;6BA4BS;AAAA;;AACL,aACE;AACE;AACA;AACA;AACA,QAAA,SAAS,yDAEL,KAAKN,KAAL,CAAWC,SAAX,GAAsB,KAAKG,YAAL,EAAtB,GAA2C,EAFtC,+BAGL,KAAKJ,KAAL,CAAWC,SAAX,GAAsB,KAAKD,KAAL,CAAWE,OAAjC,GAA0C,OAHrC,mBAJX;AASE,QAAA,EAAE,YAAK,KAAKF,KAAL,CAAWE,OAAhB,CATJ,CAUE;AAVF;AAWE,QAAA,cAAc,EAAE;AAAA,iBAAM,MAAI,CAACQ,QAAL,CAAc;AAAET,YAAAA,SAAS,EAAE;AAAb,WAAd,CAAN;AAAA,SAXlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAaG,KAAKE,aAAL,EAbH,CADF;AAiBH;;;;EAjFqBL,S;;AAoF1B,eAAeC,WAAf","sourcesContent":["import React, {Component} from \"react\";\nimport \"./GameMessage.css\";\n\nclass GameMessage extends Component {\n\n    state = {\n        animating: false,\n        message: \"\"\n    }\n\n    // function runs on every state change\n    componentDidUpdate(prevProps) {\n\n      // will be passed into setState function\n      let newState = {\n        animating: true\n      }\n\n      // deconstruct score and topScore from the pervious state\n      const {score, topScore} = prevProps\n\n      // change message if user guess correclty or incorrectly\n      if (score === 0 && topScore === 0) {\n        newState.message = \"\";\n      } else if (score !== 0 && topScore > 0) {\n        newState.message = \"correct\";\n      } else {\n        newState.message = \"incorrect\";\n      }\n\n      // set the state with the new message if the score changes, \n      // or the message and state message are not equal\n      if (score !== this.props.score || this.state.message !== newState.message) {\n        this.setState(newState);\n      }\n  \n    }\n\n    // change the display message based on the message state\n    renderMessage = () => {\n        switch (this.state.message) {\n        case \"correct\":\n          return \"You guessed correctly!\";\n        case \"incorrect\":\n          return \"You guessed incorrectly!\";\n        default:\n          return \"Click a character to begin!\";\n        }\n    };\n\n    // add animation class when animateClass state updates\n    // animations from aniamte.css library\n    // https://daneden.github.io/animate.css/\n    addAnimation = () => {\n      switch (this.state.message) {\n        case \"correct\":\n          return \"animated pulse\";\n        case \"incorrect\":\n          return \"animated hinge\";\n        default:\n          return \"\";\n        }     \n    }\n\n    \n\n    render() {\n        return(\n          <li \n            // if the state.aniamtion = true, add the class from animate.css to trigger the animation,\n            // also add the state.message as a class, which changes the color,\n            // if aniamtion.state = false, remove the aniamte.css class and add the '.black' class\n            className={` \n              gameMessage \n              ${this.state.animating? this.addAnimation(): \"\"}  \n              ${this.state.animating? this.state.message: \"black\"}\n            `}\n            id={`${this.state.message}`}\n            // set the animation state back to false after the classes are added\n            onAnimationEnd={() => this.setState({ animating: false })} \n          >\n            {this.renderMessage()}\n          </li>  \n        );\n    }\n}\n\nexport default GameMessage;\n"]},"metadata":{},"sourceType":"module"}