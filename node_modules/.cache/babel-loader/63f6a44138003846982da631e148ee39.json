{"ast":null,"code":"import _objectSpread from \"/Users/Admin/Desktop/code/react-prractice/clicky-game/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/Admin/Desktop/code/react-prractice/clicky-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Admin/Desktop/code/react-prractice/clicky-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Admin/Desktop/code/react-prractice/clicky-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Admin/Desktop/code/react-prractice/clicky-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Admin/Desktop/code/react-prractice/clicky-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Admin/Desktop/code/react-prractice/clicky-game/src/components/Game/Game.js\";\nimport React, { Component } from \"react\";\nimport FriendCard from \"../FriendCard\";\nimport Wrapper from \"../Wrapper\";\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\nimport friends from \"../../data\";\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Game)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      friends: friends,\n      score: 0,\n      topScore: 0 // function gets called when the page loads\n\n    };\n\n    _this.shuffleDeck = function (friends) {\n      var newFriends = friends.sort(function (a, b) {\n        return 0.5 - Math.random();\n      });\n      return newFriends;\n    };\n\n    _this.resetDeck = function (friends) {\n      var resetFriends = friends.map(function (friend) {\n        return _objectSpread({}, friend, {\n          clicked: false\n        });\n      }); // console.log(friends);\n      // console.log(resetFriends);\n\n      return _this.shuffleDeck(resetFriends);\n    };\n\n    _this.correctGuess = function (newFriends) {\n      var newScore = _this.state.score;\n      newScore++; // fix would be this.state.score\n\n      var newTopScore = Math.max(newScore, _this.state.topScore);\n\n      _this.setState({\n        friends: _this.shuffleDeck(newFriends),\n        score: newScore,\n        topScore: newTopScore\n      });\n    };\n\n    _this.wrongGuess = function (newFriends) {\n      _this.setState({\n        friends: _this.resetDeck(newFriends),\n        score: 0\n      });\n    };\n\n    _this.gameCardClick = function (id) {\n      var guessedCorrectly = false; // newFriends will be the friends array with updated clicked properties\n\n      var newFriends = _this.state.friends.map(function (friend) {\n        if (friend.id === id) {\n          if (!friend.clicked) {\n            friend.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return friend;\n      }); // if guessedCorrectly = true, run the correctGuess function,\n      // else run the wrongGuess function\n\n\n      guessedCorrectly ? _this.correctGuess(newFriends) : _this.wrongGuess(newFriends);\n    };\n\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // reorders the friends array on state changes\n      this.setState({\n        friends: this.shuffleDeck(this.state.friends)\n      });\n    } // shuffle the imported friends array in random order\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(Header, {\n        score: this.state.score,\n        topScore: this.state.topScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), this.state.friends.map(function (friend) {\n        return React.createElement(FriendCard, {\n          key: friend.id,\n          id: friend.id,\n          image: friend.image,\n          clicked: friend.clicked,\n          handleClick: _this2.gameCardClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/Admin/Desktop/code/react-prractice/clicky-game/src/components/Game/Game.js"],"names":["React","Component","FriendCard","Wrapper","Header","Footer","friends","Game","state","score","topScore","shuffleDeck","newFriends","sort","a","b","Math","random","resetDeck","resetFriends","map","friend","clicked","correctGuess","newScore","newTopScore","max","setState","wrongGuess","gameCardClick","id","guessedCorrectly","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport FriendCard from \"../FriendCard\";\nimport Wrapper from \"../Wrapper\";\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\nimport friends from \"../../data\";\n\n\nclass Game extends Component {\n  state = {\n    friends: friends,\n    score: 0,\n    topScore: 0\n  }\n\n// function gets called when the page loads\ncomponentDidMount() {\n  // reorders the friends array on state changes\n  this.setState({ friends: this.shuffleDeck(this.state.friends) });\n}\n\n // shuffle the imported friends array in random order\n shuffleDeck = friends => {\n  let newFriends = friends.sort(function(a, b){return 0.5 - Math.random()});\n  return newFriends;\n};\n\n// resets all the clicked properties to false\nresetDeck = friends => {\n  const resetFriends = friends.map(friend => ({ ...friend, clicked: false }));\n  // console.log(friends);\n  // console.log(resetFriends);\n  return this.shuffleDeck(resetFriends);\n};\n\n// checks to see if score is higher than the topscore then updates the state with the update array\ncorrectGuess = newFriends => {\n  let newScore = this.state.score;\n  newScore++\n  // fix would be this.state.score\n  let newTopScore = Math.max(newScore, this.state.topScore);\n\n  this.setState({\n      friends: this.shuffleDeck(newFriends),\n      score: newScore,\n      topScore: newTopScore,\n      \n  })\n}\n\n// restarts the game with fresh data\nwrongGuess = newFriends => {\n  this.setState({\n    friends: this.resetDeck(newFriends),\n      score: 0\n  })\n}\n\n// when a card is clicked, check if it has been clicked before,\n// then update that cards clicked property\ngameCardClick = id => {\n  let guessedCorrectly = false;\n  // newFriends will be the friends array with updated clicked properties\n  const newFriends= this.state.friends.map(friend => {\n    if (friend.id === id) {\n      if (!friend.clicked) {\n        friend.clicked = true;\n        guessedCorrectly = true;\n      }\n    }\n    return friend;     \n  });\n  // if guessedCorrectly = true, run the correctGuess function,\n  // else run the wrongGuess function\n  guessedCorrectly ? this.correctGuess(newFriends) : this.wrongGuess(newFriends);\n};\n\n\n  \n  render() {\n    return (\n      <div>\n        <Header score={this.state.score} topScore = {this.state.topScore} />\n          <Wrapper>\n            <h1></h1>\n            {this.state.friends.map(friend => \n              <FriendCard\n              key={friend.id}\n              id={friend.id}\n              image={friend.image}\n              clicked={friend.clicked}\n              handleClick={this.gameCardClick}\n            />\n              )}\n            \n          </Wrapper>\n        </div>\n      );\n    }\n    \n    \n}\n\n\n\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}